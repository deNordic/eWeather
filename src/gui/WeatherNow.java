package gui;

import eweather.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.ArrayList;
import model.Dbweathernow;

public class WeatherNow extends javax.swing.JFrame {

    /**
     * Creates new form WeatherNow
     */
    public WeatherNow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ChooseCityJList = new javax.swing.JList<>();
        WeatherNowJButton = new javax.swing.JButton();
        RefreshJButton = new javax.swing.JButton();
        WeatherNowReturnJbutton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        WeatherNowJtable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        ChooseCityJList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Athens", "Thessaloniki", "Patra", "Larisa", "Heraklion" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ChooseCityJList.setName(""); // NOI18N
        jScrollPane1.setViewportView(ChooseCityJList);
        ChooseCityJList.getAccessibleContext().setAccessibleDescription("");

        WeatherNowJButton.setText("Current Weather");
        WeatherNowJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeatherNowJButtonActionPerformed(evt);
            }
        });

        RefreshJButton.setText("Refresh");
        RefreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshJButtonActionPerformed(evt);
            }
        });

        WeatherNowReturnJbutton.setText("Back");
        WeatherNowReturnJbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeatherNowReturnJbuttonActionPerformed(evt);
            }
        });

        jLabel2.setText("Select one or more cities: ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Current Weather menu");

        WeatherNowJtable.setAutoCreateRowSorter(true);
        WeatherNowJtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "City", "Temperature (°C)", "Description", "Wind Speed (m/s)", "Clouds (%)", "Date/Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Object.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        WeatherNowJtable.setColumnSelectionAllowed(true);
        WeatherNowJtable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(WeatherNowJtable);
        WeatherNowJtable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(WeatherNowReturnJbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(WeatherNowJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(RefreshJButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(423, 423, 423)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(WeatherNowJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RefreshJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(WeatherNowReturnJbutton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void RefreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshJButtonActionPerformed
        
        Refresh ref = new Refresh();
        ref.fillArrayLists(); //κλήση μεθόδου που παίρνει δεδομένα από το OpenWeatherAPI και γεμίζει τις δημιουργημένες λίστες και τη ΒΔ
        
        if (ChooseCityJList.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null,"No city is selected from the list","Display Message",JOptionPane.INFORMATION_MESSAGE);
        }
        else {
            DefaultTableModel model = (DefaultTableModel)WeatherNowJtable.getModel();
            //Καθαρισμός Πίνακα
            model.setRowCount(0);
            //Πλήρωση Πίνακα με αντιστοίχηση επιλογής
            for(int i=0; i<ChooseCityJList.getSelectedValuesList().size(); i++) {
                
                for(int j=0; j<5; j++) {
                    
                    if(ChooseCityJList.getSelectedValuesList().get(i) == CityIndex.getCityName(j)) {
                        
                    ShowWeatherNowJTable(CityIndex.getCityCode(j));
                    }
                }
            }
        }                                    
    }//GEN-LAST:event_RefreshJButtonActionPerformed

    private void WeatherNowReturnJbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeatherNowReturnJbuttonActionPerformed
        this.dispose();
    }//GEN-LAST:event_WeatherNowReturnJbuttonActionPerformed

    private void WeatherNowJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeatherNowJButtonActionPerformed
        
        
        if (ChooseCityJList.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(null,"No city is selected from the list","Display Message",JOptionPane.INFORMATION_MESSAGE);
        }
        else {
            DefaultTableModel model = (DefaultTableModel)WeatherNowJtable.getModel();
            //Καθαρισμός Πίνακα
            model.setRowCount(0);
            //Πλήρωση Πίνακα με αντιστοίχηση επιλογής
            for(int i=0; i<ChooseCityJList.getSelectedValuesList().size(); i++) {
                
                for(int j=0; j<5; j++) {
                    
                    if(ChooseCityJList.getSelectedValuesList().get(i) == CityIndex.getCityName(j)) {
                        ShowWeatherNowJTable(CityIndex.getCityCode(j));
                    }
                }
            }
        }
    }//GEN-LAST:event_WeatherNowJButtonActionPerformed
    
    public ArrayList<Dbweathernow> getCityList(int cityid) {
        
        ArrayList<Dbweathernow> cityList = new ArrayList<>();
        try {
            //Δημιουργία σύνδεσης με ΒΔ
            Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/weatherdb","wdb","123");
            //query για την ανάκτηση των δεδομένων
            String query = "SELECT * FROM DBWEATHERNOW WHERE (SELECT MAX(FILEID) FROM DBWEATHERNOW WHERE CITYID ="+cityid+")=FILEID";
            Statement st;
            ResultSet rs;
            st = conn.createStatement();
            rs= st.executeQuery(query);
            
            Dbweathernow dbweathernow;
            //όσο υπάρχει επόμενο rs τρέχει constructor της Dbweathernow με τα αντίστοιχα ορίσματα.
            while(rs.next()) {
                dbweathernow = new Dbweathernow (rs.getInt("FILEID"), rs.getString("CITYNAME"), rs.getInt("CITYID"), 
                        rs.getDouble("TEMP"), rs.getString("WEATHER_DESCRIPTION"), rs.getDouble("WIND_SPEED"), rs.getInt("CLOUDS"), rs.getTimestamp("DT"));
                //Καταχώρηση στη Citylist    
                cityList.add(dbweathernow);
        }
            
        }
        catch(Exception e){
            e.printStackTrace();
        
        }return cityList;
    }
    
    public void ShowWeatherNowJTable(int cityid) {
        
        ArrayList<Dbweathernow> cityList = getCityList(cityid);
        
        DefaultTableModel model = (DefaultTableModel)WeatherNowJtable.getModel();
        Object[] row = new Object [6];
                row[0] = cityList.get(0).getCityname();
                row[1] = cityList.get(0).getTemp();
                row[2] = cityList.get(0).getWeatherDescription();
                row[3] = cityList.get(0).getWindSpeed();
                row[4] = cityList.get(0).getClouds();
                row[5] = cityList.get(0).getDt();
                
            model.addRow(row);
    }
        
    
    /**
     * @param args the command line arguments
     */
        
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WeatherNow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WeatherNow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WeatherNow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WeatherNow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new WeatherNow().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> ChooseCityJList;
    private javax.swing.JButton RefreshJButton;
    private javax.swing.JButton WeatherNowJButton;
    private javax.swing.JTable WeatherNowJtable;
    private javax.swing.JButton WeatherNowReturnJbutton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}