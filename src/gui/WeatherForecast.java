package gui;

import eweather.*;
import model.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class WeatherForecast extends javax.swing.JFrame {
    
    //Creates new form WeatherForecast

    public WeatherForecast() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cityNameJComboBox = new javax.swing.JComboBox<>();
        oneDayForecastJButton = new javax.swing.JButton();
        fiveDaysForecastJΒutton = new javax.swing.JButton();
        refreshForecastJΒutton = new javax.swing.JButton();
        returnJΒutton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ForecastJΤable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        cityNameJComboBox.setMaximumRowCount(5);
        cityNameJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Athens", "Thessaloniki", "Patra", "Larisa", "Heraklion" }));
        cityNameJComboBox.setSelectedItem(null);
        cityNameJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityNameJComboBoxActionPerformed(evt);
            }
        });

        oneDayForecastJButton.setText("1-day forecast");
        oneDayForecastJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneDayForecastJButtonActionPerformed(evt);
            }
        });

        fiveDaysForecastJΒutton.setText("5-days forecast");
        fiveDaysForecastJΒutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveDaysForecastJΒuttonActionPerformed(evt);
            }
        });

        refreshForecastJΒutton.setText("Refresh");
        refreshForecastJΒutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshForecastJΒuttonActionPerformed(evt);
            }
        });

        returnJΒutton.setText("Back");
        returnJΒutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnJΒuttonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Weather Forecast menu");

        jLabel3.setText("Choose city:");

        ForecastJΤable.setAutoCreateRowSorter(true);
        ForecastJΤable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "City", "Temperature (°C)", "Description", "Clouds (%)", "Windspeed (m/s)", "Rain (mm)", "Snow (mm)", "Date/Time"
            }
        ));
        jScrollPane1.setViewportView(ForecastJΤable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(247, 247, 247)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(cityNameJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fiveDaysForecastJΒutton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(oneDayForecastJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(refreshForecastJΒutton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(520, 520, 520))
                            .addComponent(returnJΒutton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(oneDayForecastJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cityNameJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(fiveDaysForecastJΒutton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refreshForecastJΒutton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(returnJΒutton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void refreshForecastJΒuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshForecastJΒuttonActionPerformed
        
        Refresh ref = new Refresh();
        ref.fillArrayLists();
        refreshAction();
    }//GEN-LAST:event_refreshForecastJΒuttonActionPerformed

    private void returnJΒuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnJΒuttonActionPerformed
        this.dispose();
    }//GEN-LAST:event_returnJΒuttonActionPerformed

    private void cityNameJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityNameJComboBoxActionPerformed
        
    }//GEN-LAST:event_cityNameJComboBoxActionPerformed
    
    private void oneDayForecastJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneDayForecastJButtonActionPerformed
        this.refreshAction();
    }//GEN-LAST:event_oneDayForecastJButtonActionPerformed

    private void fiveDaysForecastJΒuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveDaysForecastJΒuttonActionPerformed
        
        if (cityNameJComboBox.getSelectedIndex() == -1)    {
            JOptionPane.showMessageDialog(null,"No city is selected from the list","Display Message",JOptionPane.INFORMATION_MESSAGE);
        }
        else {DefaultTableModel model = (DefaultTableModel)ForecastJΤable.getModel();
            //Καθαρισμός Πίνακα
            model.setRowCount(0);
            //Πλήρωση Πίνακα
            for(int i=0; i<5; i++)    {
                
                if(cityNameJComboBox.getSelectedItem() == CityIndex.getCityName(i))    {
                    
                    ShowForecastJtable("SELECT * FROM DBFORECAST WHERE CITYID="+CityIndex.getCityCode(i)+"FETCH FIRST 40 ROWS ONLY");
                
                }    
            }
        }          
    }//GEN-LAST:event_fiveDaysForecastJΒuttonActionPerformed

    private void refreshAction(){
        
        if (cityNameJComboBox.getSelectedIndex() == -1)    {
            JOptionPane.showMessageDialog(null,"No city is selected from the list","Display Message",JOptionPane.INFORMATION_MESSAGE);
        }
        else {DefaultTableModel model = (DefaultTableModel)ForecastJΤable.getModel();
            //Καθαρισμός Πίνακα
            model.setRowCount(0);
            //Πλήρωση Πίνακα
            for(int i=0; i<5; i++)    {
                
                if(cityNameJComboBox.getSelectedItem() == CityIndex.getCityName(i))    {
                    ShowForecastJtable("SELECT * FROM (SELECT * FROM DBFORECAST WHERE CITYID=" +CityIndex.getCityCode(i)+ "ORDER BY FILEID DESC FETCH FIRST 40 ROWS ONLY) AS DAILY ORDER BY FILEID ASC FETCH FIRST 8 ROWS ONLY");
                }    
            }
        }
    }
      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WeatherForecast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WeatherForecast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WeatherForecast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WeatherForecast.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WeatherForecast().setVisible(true);
            }
        });
    }
    
    
    
    
    
    public ArrayList<Dbforecast> getCityList(String query) {
        
        ArrayList<Dbforecast> cityList = new ArrayList<>();
    try {
        //Δημιουργία σύνδεσης με ΒΔ
        Connection conn = DriverManager.getConnection("jdbc:derby://localhost:1527/weatherdb","wdb","123"); 
        //query για την ανάκτηση των δεδομένων
        
        PreparedStatement st = conn.prepareStatement(query);
        ResultSet rs = st.executeQuery();
        
        
        while(rs.next()) { //όσο υπάρχει επόμενο rs τρέχει constructor της Dbweathernow με τα αντίστοιχα ορίσματα.
            
            Dbforecast dbforecast = new Dbforecast();
            dbforecast.setFileid(rs.getInt("fileid"));
            dbforecast.setCityName(rs.getString("cityname"));
            dbforecast.setCityid(rs.getInt("cityid"));
            dbforecast.setWeatherDescription(rs.getString("weather_Description"));
            dbforecast.setTemp(rs.getDouble("temp"));
            dbforecast.setClouds(rs.getInt("clouds"));
            dbforecast.setWindSpeed(rs.getDouble("wind_Speed"));
            dbforecast.setRain(rs.getDouble("rain"));
            dbforecast.setSnow(rs.getDouble("snow"));
            dbforecast.setDt(rs.getTimestamp("dt"));
           
            //Καταχώρηση στη Citylist    
            cityList.add(dbforecast);
        }
    }    
        
        catch(Exception e){
            e.printStackTrace();
        
    } return cityList;
}
    
    public void ShowForecastJtable(String query) {
        
        ArrayList<Dbforecast> cityList = getCityList(query);
        
        DefaultTableModel model = (DefaultTableModel)ForecastJΤable.getModel();
        Object[] row = new Object [8];
        
            for (int i=0; i<cityList.size(); i++) {  
                
                row[0] = cityList.get(i).getCityName();
                row[1] = cityList.get(i).getTemp();
                row[2] = cityList.get(i).getWeatherDescription();
                row[3] = cityList.get(i).getClouds();
                row[4] = cityList.get(i).getWindSpeed();
                row[5] = cityList.get(i).getRain();
                row[6] = cityList.get(i).getSnow();
                row[7] = cityList.get(i).getDt();
                
            model.addRow(row);
        }
    }
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ForecastJΤable;
    private javax.swing.JComboBox<String> cityNameJComboBox;
    private javax.swing.JButton fiveDaysForecastJΒutton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton oneDayForecastJButton;
    private javax.swing.JButton refreshForecastJΒutton;
    private javax.swing.JButton returnJΒutton;
    // End of variables declaration//GEN-END:variables
}
